
//TO-DO LIST

#include <iostream>
#include <vector>
#include <string>
using namespace std;

//defines a task with a description and completed status
struct Task
{
    string description;
    bool completed;

    Task(string desc) : description(desc), completed(false) {}
};

//function to show the menu options to the user
void showMenu() 
{
    cout << "To-Do List Manager" << endl;
    cout << "1. Add Task" << endl;
    cout << "2. View Tasks" << endl;
    cout << "3. Mark Task as Completed" <<endl;
    cout << "4. Remove Task" << endl;
    cout << "5. Exit" << endl;
    cout << "Enter your choice: ";
}

//defining a class 
class ToDoList 
{
private:
    vector<Task> tasks; //vector of type Task

public:
	//fuction to add tasks to the list
    void addTask(const string& description) 
	{
        tasks.push_back(description);
        cout << "Task added: " << description << endl;
    }

	//Function to display the tasks with their status(completed or pending)
    void viewTasks() const 
	{
        if (tasks.empty()) {
           cout << "No tasks available." << endl;
            return;
        }

        for (size_t i = 0; i < tasks.size(); ++i) 
		{
            cout << i + 1 << ". " << tasks[i].description<< " [" << (tasks[i].completed ? "Completed" : "Pending") << "]" << endl;
        }
    }

	//allow users to marks tasks as completed
    void markTaskAsCompleted(size_t in) 
	{
        if (in > 0 && in <= tasks.size()) 
		{
            tasks[in - 1].completed = true;
            cout << "Task " << in << " marked as completed." << endl;
        } else 
		{
            cout << "Invalid task index." << endl;
        }
    }

	// Funtion to provide an option to remove the tasks from the list
    void removeTask(size_t in) 
	{
        if (in > 0 && in <= tasks.size()) 
		{
            cout << "Task removed: " << tasks[in - 1].description << endl;
            tasks.erase(tasks.begin() + in - 1);
        } else 
		{
            cout << "Invalid task index." << endl;
        }
    }
};


// Main function for demonstration
int main() 
{
    ToDoList todoList;
    int choice;

    while (true) 
	{
        showMenu();
        cin >> choice;

        switch(choice) 
        {
		case 1:
		{
            cin.ignore();  // Clear the newline character from the input buffer 
			string description;
            cout << "Enter task description: ";
            getline(cin, description);
            todoList.addTask(description);
            break;
        } 
		case 2: 
		{
            todoList.viewTasks();
            break;
        } 
		case 3:
		{
            size_t in;
            cout << "Enter task index to mark as completed: ";
            cin >> in;
            todoList.markTaskAsCompleted(in);
            break;
        } 
		case 4:
		{
            size_t in;
            cout << "Enter task index to remove: ";
            cin >> in;
            todoList.removeTask(in);
            break;
        } 
		case 5: 
		{
            break;
        } 
		default:
		{
            cout << "Invalid choice. Please try again." << endl;
            break;
        }
       	}
    }

    return 0;
}
